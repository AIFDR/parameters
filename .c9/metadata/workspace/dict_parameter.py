{"filter":false,"title":"dict_parameter.py","tooltip":"/dict_parameter.py","undoManager":{"mark":33,"position":33,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":46}},"text":"from generic_parameter import GenericParameter"},{"action":"insertText","range":{"start":{"row":0,"column":46},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":76,"column":0}},"lines":["","class ListParameter(GenericParameter):","    \"\"\"A subclass of paramter that allows the user to select from a list.","    ","    .. versionadded:: 2.2","    \"\"\"","    ","    def __init__(self):","        \"\"\"Constructor.\"\"\"","        self.minimum_count = None","        self.maximum_count = None","        self.element_type = None","        ","    def set_minimum_item_count(self, minimum_count):","        \"\"\"Define the minimum number of item in the parameter.","        ","        :param maximum_count: Minimum number of items that may be ","            selected. Defaults to 1.","        :type minimum_count: int","        \"\"\"","        self.maximum_count = minimum_count","","","    def set_maximum_item_count(self, maximum_count):","        \"\"\"Define the maximum allowed number of items that can be selected.","        ","        :param maximum_count: Maximum number of items that may be selected. ","            Defaults to 1.","        :type maximum_count: int","        \"\"\"","        self.maximum_count = maximum_count","    ","    def count(self):","        \"\"\"Obtain the number of element in the list.","        ","        :returns: The number of elements.","        :rtype: int","        \"\"\"","        return len(self.value)","        ","    def set_element_type(element_type):","        \"\"\"Define the type of the element of the list.","        ","        :param element_type: Maximum number of items that may be selected. ","            Defaults to 1.","        :type element_type: ??????","        \"\"\"","        self.element_type = element_type","    ","    def set_value(value):","        \"\"\"Define the current value for the parameter.","        ","        Need to check the type of each element.","        ","        :param value: The value of the parameter itself.","        :type value: str, bool, integer, float, list, dict","        \"\"\"","        # Checking that the type of value is the same as the expected value","        if type(value) is not self.expected_type:","            message = (","                'The type of the value [%s] is not match with the expected '","                'type of the parameter [%s].' % (","                    str(type(value), str(self.expected_type))","            raise TypeError(message)","        ","        for element in value:","            if type(element) is not self.element_type:","                message = (","                'The type of the element [%s] is not match with the expected '","                'type of the parameter [%s].' % (","                    str(type(value), str(self.element_type))","                raise TypeError(message)","        ","        self.value = value","            "]},{"action":"insertText","range":{"start":{"row":76,"column":0},"end":{"row":76,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":9},"end":{"row":2,"column":10}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":8},"end":{"row":2,"column":9}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":7},"end":{"row":2,"column":8}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":6},"end":{"row":2,"column":7}},"text":"L"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":6},"end":{"row":2,"column":7}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":7},"end":{"row":2,"column":8}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":8},"end":{"row":2,"column":9}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":9},"end":{"row":2,"column":10}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":68},"end":{"row":3,"column":72}},"text":"list"},{"action":"insertText","range":{"start":{"row":3,"column":68},"end":{"row":3,"column":69}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":69},"end":{"row":3,"column":70}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":70},"end":{"row":3,"column":71}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":3,"column":68},"end":{"row":3,"column":71}},"text":"dic"},{"action":"insertText","range":{"start":{"row":3,"column":68},"end":{"row":3,"column":72}},"text":"dict"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":76,"column":0},"end":{"row":76,"column":8}},"text":"        "},{"action":"removeLines","range":{"start":{"row":15,"column":0},"end":{"row":76,"column":0}},"nl":"\n","lines":["        \"\"\"Define the minimum number of item in the parameter.","        ","        :param maximum_count: Minimum number of items that may be ","            selected. Defaults to 1.","        :type minimum_count: int","        \"\"\"","        self.maximum_count = minimum_count","","","    def set_maximum_item_count(self, maximum_count):","        \"\"\"Define the maximum allowed number of items that can be selected.","        ","        :param maximum_count: Maximum number of items that may be selected. ","            Defaults to 1.","        :type maximum_count: int","        \"\"\"","        self.maximum_count = maximum_count","    ","    def count(self):","        \"\"\"Obtain the number of element in the list.","        ","        :returns: The number of elements.","        :rtype: int","        \"\"\"","        return len(self.value)","        ","    def set_element_type(element_type):","        \"\"\"Define the type of the element of the list.","        ","        :param element_type: Maximum number of items that may be selected. ","            Defaults to 1.","        :type element_type: ??????","        \"\"\"","        self.element_type = element_type","    ","    def set_value(value):","        \"\"\"Define the current value for the parameter.","        ","        Need to check the type of each element.","        ","        :param value: The value of the parameter itself.","        :type value: str, bool, integer, float, list, dict","        \"\"\"","        # Checking that the type of value is the same as the expected value","        if type(value) is not self.expected_type:","            message = (","                'The type of the value [%s] is not match with the expected '","                'type of the parameter [%s].' % (","                    str(type(value), str(self.expected_type))","            raise TypeError(message)","        ","        for element in value:","            if type(element) is not self.element_type:","                message = (","                'The type of the element [%s] is not match with the expected '","                'type of the parameter [%s].' % (","                    str(type(value), str(self.element_type))","                raise TypeError(message)","        ","        self.value = value","            "]},{"action":"removeText","range":{"start":{"row":14,"column":4},"end":{"row":14,"column":52}},"text":"def set_minimum_item_count(self, minimum_count):"},{"action":"removeText","range":{"start":{"row":14,"column":4},"end":{"row":15,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":8},"end":{"row":14,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":13,"column":0},"end":{"row":13,"column":8}},"text":"        "},{"action":"removeText","range":{"start":{"row":12,"column":32},"end":{"row":13,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["        self.minimum_count = None"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["        self.maximum_count = None"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":28},"end":{"row":10,"column":32}},"text":"None"},{"action":"insertText","range":{"start":{"row":10,"column":28},"end":{"row":10,"column":29}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":29},"end":{"row":10,"column":30}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":28},"end":{"row":10,"column":30}},"text":"di"},{"action":"insertText","range":{"start":{"row":10,"column":28},"end":{"row":10,"column":32}},"text":"dict"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":25}},"text":"element_type"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"e"},{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":26}},"text":"expected_type"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":33}},"text":"self.expected_type = dict"},{"action":"insertText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":35}},"text":"self.set_expected_type(int)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":30},"end":{"row":10,"column":31}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":30},"end":{"row":10,"column":31}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":30},"end":{"row":10,"column":31}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":30},"end":{"row":10,"column":31}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":31},"end":{"row":10,"column":34}},"text":"int"},{"action":"insertText","range":{"start":{"row":10,"column":31},"end":{"row":10,"column":32}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":32},"end":{"row":10,"column":33}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":33},"end":{"row":10,"column":34}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":31},"end":{"row":10,"column":34}},"text":"dic"},{"action":"insertText","range":{"start":{"row":10,"column":31},"end":{"row":10,"column":35}},"text":"dict"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":35},"end":{"row":10,"column":35},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1407488857504,"hash":"a5b5876720f5d00a2cb8948f74e22abc3442f5b5"}